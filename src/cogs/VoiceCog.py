import datetime
import time
import json
from typing import Any, Optional, Union

import nextcord
from nextcord.colour import Colour
from nextcord.ext import tasks
from nextcord.ext.commands import Bot, Cog
from nextcord.types.embed import EmbedType

from ..extensions.DBWorkerExtension import DataBase
from ..extensions.EXFormatExtension import ex_format


class AfterKickUserButtons(nextcord.ui.View):
    def __init__(self, lang, members, message) -> None:
        self.members = members
        self.message = message
        self.data = { # TODO
            ...
        } if lang == "RU" else { 
            ...
        }
        self.close_for_all.disabled = True # TODO
        self.close_for_user.disabled = True # TODO
        super().__init__(timeout=5*60)

    @nextcord.ui.button(label="close_for_all", style=nextcord.ButtonStyle.grey)
    async def close_for_all(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        
        ...
    
    @nextcord.ui.button(label="close_for_user", style=nextcord.ButtonStyle.grey)
    async def close_for_user(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):

        ...
    

    async def on_timeout(self):
        self.delete_this.disabled = True
        self.delete_two.disabled = True
        try:
            await self.message.edit(view=self)     
        except BaseException:
            pass


class KickUserSelect(nextcord.ui.Select):
    def __init__(self, admins, members, lang):
        self.admins = admins
        self.members = members
        self.lang = lang
        self.data = {
            "options_descr": "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ ",
            "options_clear": "–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä",
            "placeholder": "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å...",
            "no_admin": "–í—ã –Ω–µ —è–≤–ª—è—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            "answer": "–ò–∑ –∫–∞–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω—ã:\n",
            "none_answer": "–ù–∏ –∫—Ç–æ –Ω–µ —É–¥–∞–ª—ë–Ω..."
        } if self.lang == "RU" else {
            "options_descr": "Remove from Channel ",
            "options_clear": "Clear selection",
            "placeholder": "Choose the person you want to kick...",
            "no_admin": "You are not an administrator",
            "answer": "Removed from the channel:\n",
            "none_answer": "No one has been deleted..."
        }
        options = [
            nextcord.SelectOption(
                label=member.name,
                description=self.data["options_descr"] + member.name,
                value=member.id,
                emoji="‚ùå" if member.id in admins else "‚úÖ"
            ) for member in members
        ]
        options.append(nextcord.SelectOption(
            label=self.data["options_clear"], value="clear")
        )
        super().__init__(
            placeholder=self.data["placeholder"],
            min_values=1, 
            # len(members) if len(members) > 0 else 1  # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            max_values=len(members),
            options=options, 
        )

    async def callback(self, interaction: nextcord.Interaction):
        if "clear" in self.values:
            self.values.remove("clear")
        if not self.values:
            return
        if interaction.user.id not in self.admins \
        or not interaction.user.guild_permissions.administrator:
            await interaction.send(self.data["no_admin"], ephemeral=True)
            return
        answer = self.data["answer"]
        members = []
        for member_id in self.values:
            if int(member_id) in self.admins:
                continue
            member = [
                member for member in self.members if int(member_id) == member.id
            ][0]
            members.append(member)
            answer += f"{member.name}\n"
            await member.move_to(None)
        if answer == self.data["answer"]:
            answer = self.data["none_answer"]
        message = await interaction.send(answer, ephemeral=True)
        await message.edit(view=AfterKickUserButtons(self.lang, members, message))


class VoiceInfoEmbed(nextcord.Embed):
    def __init__(self, lang, admins, channel: nextcord.VoiceChannel):
        # TODO ...
        self.data = {
            "user_designation": "–£—á–∞—Ç–Ω–∏–∫ ",
            "admin": "—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            "not_admin": "–±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        } if lang == "RU" else {
            "user_designation": "Member ",
            "admin": "with administrator rights:",
            "not_admin": "without administrator rights:",
        }
        super().__init__(
            colour=nextcord.Colour.red(),
            title=channel.name.replace("‚óè", ""),
        )
        for member in channel.members:
            self.add_field(
                name=self.data["user_designation"] + (self.data["admin"] \
                    if member.id in admins else self.data["not_admin"]),
                value=f"{member.mention};"
            )


class VoiceChannelsButtons(nextcord.ui.View):
    def __init__(self, lang, admin, message, channel):
        super().__init__(timeout=None)
        self.channel = channel
        self.message = message
        self.admins = [admin.id]
        self.lang = lang
        self.data = {
            "set_cmbr": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥",
            "set_tech": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–∏—é –∏–≥—Ä—ã",
            "set_limit": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "close_channel": "–ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª",
            "open_channel": "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª",
            "add_member": "–î–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª",
            "del_member": "–£–¥–∞–ª–∏—Ç—å –ª—é–¥–µ–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
            "set_limit_modal_name": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            "set_limit_modal_input": '–õ–∏–º–∏—Ç...',
            "after_limit_message": "–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ",
            "after_limit_error": "–ú–∞–∫—Å–∏–º—É–º 99, 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            "else_error": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
        } if lang == "RU" else {
            "set_cmbr": "Set combat rating",
            "set_tech": "Set game nation",
            "set_limit": "Set limit users",
            "close_channel": "Close channel",
            "open_channel": "Open channel",
            "add_member": "Add people to closed channel",
            "del_member": "Remove people from closed channel",
            "set_limit_modal_name": "Set limit of members",
            "set_limit_modal_input": "Limit...",
            "after_limit_message": "Limit set to: ",
            "after_limit_error": "Maximum of 99, 0 to remove the restriction",
            "else_error": "Something went wrong"
        }
        self.select = KickUserSelect(
            self.admins, self.channel.members, "RU"
        )
        self.add_item(self.select)
        self.set_cmbr.label = self.data["set_cmbr"]
        self.set_tech.label = self.data["set_tech"]
        self.set_limit.label = self.data["set_limit"]
        self.close_channel.label = self.data["close_channel"]
        self.add_member.label = self.data["add_member"]
        self.del_member.label = self.data["del_member"]

        # TODO
        self.set_cmbr.disabled = True
        self.set_tech.disabled = True
        self.close_channel.disabled = True
        self.add_member.disabled = True
        self.del_member.disabled = True

    async def update_message(self, member, pos):
        # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ on_voice_state_update –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try:
            db = DataBase("WarThunder.db")
            await db.connect()

            # –ù–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–∞–Ω–∞–ª–µ
            if pos == "in":
                # —Ç—É—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, —á—Ç–æ —Ç–æ –∑–∞–±—ã–ª üíÄ
                ...
            
            # –ß–µ–ª–æ–≤–µ–∫ –≤—ã—à–µ–ª
            if pos == "out":
                # —Ç—É—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, —á—Ç–æ —Ç–æ –∑–∞–±—ã–ª xD
                if member.id in self.admins and len(self.admins) == 1:
                    self.admins.remove(member.id)
                    self.admins.append(self.channel.members[0].id)
                    await db.run_que(
                        "UPDATE VoiceCogChannels SET creatorId=? WHERE creatorId=?",
                        (self.channel.members[0].id, member.id)
                    )
                ...

            self.remove_item(self.select)
            self.select = KickUserSelect(
                self.admins, self.channel.members, "RU"
            )
            self.add_item(self.select)
            embed = VoiceInfoEmbed(self.lang, self.admins, self.channel)
            await self.message.edit(embed=embed, view=self)

        except BaseException as ex:
            print(ex_format(ex, "update_message"))
        finally:
            await db.close()

    async def check_admin_rules(self, interaction: nextcord.Interaction):
        if interaction.user.id in self.admins \
        or interaction.user.guild_permissions.administrator:
            return True
        await interaction.send("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", ephemeral=True)
        return False
    
    # TODO: –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=1)
    async def set_cmbr(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–† –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
        """
        if not await self.check_admin_rules(interaction):
            return
        # TODO: –∑–∞–ø–∏—Å—å –∏–Ω—Ñ—ã –æ –∫–∞–Ω–∞–ª–µ –≤ –±–¥
        # TODO Modal —Å –≤—ã–±–æ—Ä–æ–≤ –±–æ–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ float, –¥–ª–∏–Ω–∞(len) –æ—Ç 1(1.0) –¥–æ 4(10.7))
        ...
    
    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=1)
    async def set_tech(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Ü–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
        """
        if not await self.check_admin_rules(interaction):
            return
        # TODO: –∑–∞–ø–∏—Å—å –∏–Ω—Ñ—ã –æ –∫–∞–Ω–∞–ª–µ –≤ –±–¥
        # TODO Select –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å select –∏ —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω
        ...

    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=1)
    async def set_limit(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        if not await self.check_admin_rules(interaction):
            return
        modal = nextcord.ui.Modal(self.data["set_limit_modal_name"])
        modal.add_item(
            limit := nextcord.ui.TextInput(
                label=self.data["set_limit_modal_input"],
                default_value=4
            )
        )
        async def modal_callback(interaction: nextcord.Interaction):
            try:
                if int(limit.value) < 99:
                    await interaction.channel.edit(user_limit=int(limit.value))
                    await interaction.send(
                        str(self.data["after_limit_message"] + limit.value),
                        ephemeral=True
                    )
                else:
                    await interaction.send(
                        self.data["after_limit_error"],
                        ephemeral=True
                    )
            except BaseException:
                await interaction.send(
                    self.data["else_error"],
                    ephemeral=True
                )
        modal.callback = modal_callback
        await interaction.response.send_modal(modal)
    
    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=2)
    async def close_channel(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
        """
        if not await self.check_admin_rules(interaction):
            return
        # TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ (–¥–ª—è –¥–æ–Ω–∞—Ç–∞)
        ...
    
    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=2)
    async def add_member(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –≤ –ø—Ä–∞–≤–∞ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
        """
        if not await self.check_admin_rules(interaction):
            return
        # TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ (–¥–ª—è –¥–æ–Ω–∞—Ç–∞)
        ...
        
    @nextcord.ui.button(label=None, style=nextcord.ButtonStyle.grey, row=2)
    async def del_member(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –≤ –ø—Ä–∞–≤–∞—Ö –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
        """
        if not await self.check_admin_rules(interaction):
            return
        # TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ (–¥–ª—è –¥–æ–Ω–∞—Ç–∞)
        ...
    

class VoiceCog(Cog):
    def __init__(self, bot: Bot):
        """_summary_

        Args:
            bot (Bot): _description_
        """
        self.bot = bot
        self.channel_views = {}
        self.smiles_channel = None
        self.afk_channel_id = None
        self.parrent_channel_ids = None
        self.update_consts.start()
        self.on_init.start()
    
    @tasks.loop(count=1, reconnect=False)
    async def on_init(self):
        # –ß–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        try:
            db = DataBase("WarThunder.db")
            await db.connect()
            channels_db = await db.get_all("SELECT * FROM VoiceCogChannels")
            for channel_db in channels_db:
                try:
                    voice_channel: nextcord.VoiceChannel = await self.bot.fetch_channel(channel_db[1])
                except nextcord.errors.NotFound:
                    await db.run_que("DELETE FROM VoiceCogChannels WHERE channelId=?", (channel_db[1],))
                    continue
                if len(voice_channel.members) == 0:
                    await voice_channel.delete()
                    await db.run_que("DELETE FROM VoiceCogChannels WHERE channelId=?", (voice_channel.id,))
                    continue# TODO embeds
                if channel_db[2] not in [member.id for member in voice_channel.members]:
                    await db.run_que(
                        "UPDATE VoiceCogChannels SET creatorId=? WHERE creatorId=?",
                        (channel_db[2], voice_channel.members[0])
                    )
                try:
                    message = await voice_channel.fetch_message(channel_db[4])
                except nextcord.errors.NotFound:
                    message = await voice_channel.send("creating new message...")
                    await db.run_que( # –ú–æ–∂–Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —É–∫–∞–∑–∞—Ç—å id –∫–∞–Ω–∞–ª–∞, –Ω–æ –∏ —Ç–∞–∫ –Ω–æ—Ä–º
                        "UPDATE VoiceCogChannels SET messageId=? WHERE messageId=?",
                        (message.id, channel_db[4])
                    )
                lang = self.parrent_channel_ids[str(channel_db[0])].split(":")[0]
                view = VoiceChannelsButtons(lang, voice_channel.members[0], message, voice_channel)
                embed = VoiceInfoEmbed(lang, [voice_channel.members[0].id], voice_channel)
                await message.edit(content=None, embed=embed, view=view) # TODO embeds
                self.channel_views[voice_channel.id] = view
       
        except BaseException as ex:
            print(ex_format(ex, "on_init"))
        finally:
            await db.close()

    def cog_unload(self):
        pass

    @tasks.loop(hours=24)
    async def update_consts(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏:
        * self.smiles_channel = None
        * self.afk_channel_id = None
        * self.parrent_channel_ids = None
        """
        try:
            db = DataBase("WarThunder.db")
            await db.connect()
            for constant in ["smiles_channel", "afk_channel_id", "parrent_channel_ids"]:
                temp = await db.get_one(
                    "SELECT constantValue FROM VoiceCogConstants WHERE constantName=?",
                    (constant,),
                )
                setattr(self, constant, json.loads(temp[0]))
        except BaseException as ex:
            ex_format(ex, "update_consts")
        finally:
            await db.close()

    @Cog.listener()
    async def on_voice_state_update(
        self,
        member: nextcord.Member,
        before: nextcord.VoiceState,
        after: nextcord.VoiceState,
    ): # TODO: –í—Å—ë —ç—Ç–æ –¥–µ–ª–æ –º–æ–∂–Ω–æ —Ä–∞–∑–Ω–µ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, –¥–∞–±—ã –Ω–µ –≥–æ—Ä–æ–¥–∏—Ç—å 100500 –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
        if before.channel == after.channel:
            return
        try:
            voice_channel = None
            db = DataBase("WarThunder.db")
            await db.connect()

            # Connected to creater new channel (channel with ‚ûï in name)
            if after.channel and (str(after.channel.id) in self.parrent_channel_ids):
                # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ–∂–¥—É None –∏ creater channel)
                channel_type = self.parrent_channel_ids[str(after.channel.id)].split(':')
                position = None if channel_type[3] == '-' else nextcord.utils.get(
                    member.guild.voice_channels, id=int(channel_type[3])
                ).position
                afk_channel = nextcord.utils.get(
                    member.guild.voice_channels, id=int(self.afk_channel_id)
                )
                # TODO: –ö–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –æ—á—É–º–µ–ª—ã–µ —Ä—É—á–∫–∏ –Ω–µ —É—Å–ø–µ–≤–∞–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                await member.move_to(afk_channel)
                voice_channel = await member.guild.create_voice_channel(
                    name=f"{after.channel.name.replace(self.smiles_channel[0], f'{self.smiles_channel[1]} ')}",
                    position=position,  # —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    category=after.channel.category,  # –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ "–æ—Å–Ω–æ–≤—ã"
                    reason=f"{member.name} in '{after.channel.name}'",  # (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ Audit Log)
                )
                await member.move_to(voice_channel)
                message = await voice_channel.send(f"{member.name} created voice")
                lang = self.parrent_channel_ids[str(after.channel.id)].split(":")[0]
                view = VoiceChannelsButtons(lang, member, message, voice_channel)
                embed = VoiceInfoEmbed(lang, [member.id], voice_channel)
                await message.edit(content=None, embed=embed, view=view)
                self.channel_views[voice_channel.id] = view
                await db.run_que(
                    "INSERT INTO VoiceCogChannels (parrentId, channelId, creatorId, channelTime, messageId) \
                        VALUES (?, ?, ?, ?, ?)",
                    (after.channel.id, voice_channel.id, member.id, int(time.time()), message.id)
                )

            # Disconected from created channel
            query = "SELECT channelId FROM VoiceCogChannels"
            created_channels = [x[0] for x in await db.get_all(query)]
            if before.channel and (before.channel.id in created_channels) \
            and len(before.channel.members) == 0: # –ö–∞–Ω–∞–ª —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, view –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                    await before.channel.delete()
                    await db.run_que(
                        "DELETE FROM VoiceCogChannels WHERE channelId=?",
                        (before.channel.id,)
                    )
                    del self.channel_views[before.channel.id]

            # Updating view in channel
            if before.channel and before.channel.id in self.channel_views:
                await self.channel_views[before.channel.id].update_message(member, pos="out")
            if after.channel and after.channel.id in self.channel_views:
                await self.channel_views[after.channel.id].update_message(member, pos="in")

        except BaseException as ex:
            if voice_channel:
                await voice_channel.delete()
            print(ex_format(ex, "on_voice_state_update in VoceCog"))
        finally:
            await db.close()


# on_ready cog!
def setup(bot):
    print("VoiceCog loaded!")
    bot.add_cog(VoiceCog(bot))
